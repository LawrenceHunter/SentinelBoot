on:
  pull_request:
    branches: ["main"]

name: Pull CI

jobs:
  build:
    name: Build project
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v3
      - run: make
      - uses: actions/upload-artifact@v3
        with:
          name: sentinel_boot
          path: ./sentinel_boot
  build_vector:
    name: Build project for qemu_vector
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v3
      - run: BSP=qemu_vector make
  build_vf2:
    name: Build project for VisionFive 2
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v3
      - run: BSP=visionfive make
  build_unmatched:
    name: Build project for Unmatched
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v3
      - run: BSP=unmatched make
  # test:
  #   needs: build
  #   name: Test
  #   runs-on: self-hosted
  #   steps:
  #     - uses: actions/checkout@v3
  #     - run: make test

  qemu_tftp:
    needs: [build, build_vector, build_vf2, build_unmatched]
    runs-on: [self-hosted, qemu]
    steps:
      - uses: actions/checkout@v3
      - run: |
          git lfs pull
          BSP=qemu make
          timeout 5m tftp/qemu_test.sh

  vf2_tftp:
    needs: qemu_tftp
    runs-on: [self-hosted, vf2]
    steps:
      - uses: actions/checkout@v3
      - run: |
          git lfs pull
          BSP=visionfive make
          rm /tftpboot/boot/*
          mv sentinel_boot /tftpboot/boot
          cp tftp/{Image_vf2_signed.gz,rootfs.cpio.gz,jh7110-visionfive-v2.dtb,boot.scr,power_cycle_board.sh,board_serial_test.py} /tftpboot/boot
          cd /tftpboot/boot
          mv Image_vf2_signed.gz Image_signed.gz
          gzip --decompress Image_signed.gz
          gzip --decompress rootfs.cpio.gz
          chmod +x *.sh
          mkimage -A riscv -T script -O efi -C none -d boot.scr boot.scr.uimg
          ./power_cycle_board.sh off && ./power_cycle_board.sh on
          timeout 5m python3 board_serial_test.py
          ./power_cycle_board.sh off

  qemu_vector_tftp:
    needs: vf2_tftp
    runs-on: [self-hosted, qemu]
    steps:
      - uses: actions/checkout@v3
      - run: |
          git lfs pull
          BSP=qemu_vector make
          timeout 5m tftp/qemu_test.sh

  # hyperfine:
  #   needs: vf2_tftp
  #   runs-on: [self-hosted, vf2]
  #   steps:
  #     - uses: actions/checkout@v3
  #     - run: |
  #         wget https://github.com/sharkdp/hyperfine/releases/download/v1.18.0/hyperfine-v1.18.0-aarch64-unknown-linux-gnu.tar.gz
  #         tar xvf hyperfine-v1.18.0-aarch64-unknown-linux-gnu.tar.gz
  #         BSP=qemu_tftp make
  #         hyperfine-v1.18.0-aarch64-unknown-linux-gnu/hyperfine --warmup 1 --show-output tftp/qemu_test.sh

  clippy:
    needs: qemu_vector_tftp
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v3
      - run: make && make clippy

  Doc:
    needs: qemu_vector_tftp
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v3
      - run: make && make doc
      - run: tar -zcvf doc.tar.gz target/riscv64gc-unknown-none-elf/doc/
      - uses: actions/upload-artifact@v3
        with:
          name: docs
          path: ./doc.tar.gz
