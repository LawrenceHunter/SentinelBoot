on:
  push:
    branches: ["main"]

name: CI

jobs:
  build:
    name: Build project
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v3
      - run: |
          if ! [ -x "$(command -v docker)" ]; then
            curl -fsSL https://get.docker.com -o get-docker.sh
            sh get-docker.sh
            groupadd docker || true
            usermod -aG docker $USER
            newgrp docker
          fi
          make clean && make
      - uses: actions/upload-artifact@v3
        with:
          name: bootloader.img
          path: ./bootloader.img
  test:
    needs: build
    name: Test
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v3
      - run: |
          if ! [ -x "$(command -v docker)" ]; then
            curl -fsSL https://get.docker.com -o get-docker.sh
            sh get-docker.sh
            groupadd docker || true
            usermod -aG docker $USER
            newgrp docker
          fi
          if ! [ -x "$(command -v qemu-system-riscv64)" ]; then
            apt install -y qemu-system
          fi
          echo "# Test summary\n"
          make test >> $GITHUB_STEP_SUMMARY
  clippy:
    needs: build
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v3
      - run: |
          if ! [ -x "$(command -v docker)" ]; then
            curl -fsSL https://get.docker.com -o get-docker.sh
            sh get-docker.sh
            groupadd docker || true
            usermod -aG docker $USER
            newgrp docker
          fi
          make clippy >> $GITHUB_STEP_SUMMARY
  Doc:
    needs: build
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v3
      - run: |
          if ! [ -x "$(command -v docker)" ]; then
            curl -fsSL https://get.docker.com -o get-docker.sh
            sh get-docker.sh
            groupadd docker || true
            usermod -aG docker $USER
            newgrp docker
          fi
          make doc
          tar -zcvf doc.tar.gz target/riscv64gc-unknown-none-elf/doc/
      - uses: actions/upload-artifact@v3
        with:
          name: docs
          path: ./doc.tar.gz

  Call_stack:
    needs: build
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v3
      - run: |
          if ! [ -x "$(command -v docker)" ]; then
            curl -fsSL https://get.docker.com -o get-docker.sh
            sh get-docker.sh
            groupadd docker || true
            usermod -aG docker $USER
            newgrp docker
          fi
          make call_stack
      - uses: actions/upload-artifact@v3
        with:
          name: Call graph
          path: ./cg.svg

  Guess_unsafe_count:
    needs: build
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v3
      - run: |
          echo "# Crude unsafe line estimate" >> $GITHUB_STEP_SUMMARY
          echo "Count: " >> $GITHUB_STEP_SUMMARY
          grep -r -E "unsafe\s?\{" | wc -l >> $GITHUB_STEP_SUMMARY

  Geiger:
    needs: build
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v3
      - run: |
          if ! [ -x "$(command -v docker)" ]; then
            curl -fsSL https://get.docker.com -o get-docker.sh
            sh get-docker.sh
            groupadd docker || true
            usermod -aG docker $USER
            newgrp docker
          fi
          echo '```' >> $GITHUB_STEP_SUMMARY
          make geiger >> $GITHUB_STEP_SUMMARY || true
          echo '```' >> $GITHUB_STEP_SUMMARY

  GenImage:
    needs: build
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v3
      - run: |
          if ! [ -x "$(command -v docker)" ]; then
            curl -fsSL https://get.docker.com -o get-docker.sh
            sh get-docker.sh
            groupadd docker || true
            usermod -aG docker $USER
            newgrp docker
          fi
          make image

  tftp:
    needs: build
    runs-on: [self-hosted, vf2]
    steps:
      - uses: actions/checkout@v3
      - run: |
          make
          mv bootloader.img /tftpboot/boot
          cp boot.scr /tftpboot/boot
          cd /tftpboot/boot
          mkimage -A riscv -T script -O linux -C gzip -d boot.scr boot.scr.uimg
          usbrelay HURTM_1=0 && usbrelay HURTM_2=0
          timeout 5m minicom -D /dev/ttyUSB0 -C output_log
          usbrelay HURTM_1=1 && usbrelay HURTM_2=1
          echo '```' >> $GITHUB_STEP_SUMMARY
          cat output_log >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

  qemu_tftp:
    needs: build
    runs-on: [self-hosted, vf2]
    steps:
      - uses: actions/checkout@v3
      - run: |
          make
          mv bootloader.img /tftpboot/boot
          cp boot.scr /tftpboot/boot
          (cd /tftpboot/boot && mkimage -A riscv -T script -O linux -C gzip -d boot.scr boot.scr.uimg)
          timeout 5m qemu-system-riscv64 -M virt -cpu rv64 -smp 2 -m 512 -nographic -display none \
          -serial mon:stdio -s -netdev tap,id=mynet0,ifname=tap0,script=no,downscript=no \
          -device e1000,netdev=mynet0,mac=52:55:00:d1:55:01 -bios tfpt/u-boot.bin
