import pyfiglet, subprocess


def generate_header():
    return "// AUTOGENERATED DO NOT EDIT\n"


def generate_boot_logo():
    # Fonts: http://www.figlet.org/examples.html
    logo = pyfiglet.figlet_format("OpenThesis", font="larry3d", width=80).split(
        "\n"
    )
    text = "pub fn print_boot_logo() {\n"
    for line in logo:
        text += f'\tprintln!(r"{line}");\n'
    text += "}"
    return text


def generate_version():
    sha = (
        subprocess.check_output(["git", "rev-parse", "--short=8", "HEAD"])
        .decode()
        .strip()
    )
    dirty = ""
    try:
        subprocess.check_call(["git", "diff", "--quiet"])
    except subprocess.CalledProcessError:
        dirty = "dirty"
    return f'pub const SHA: &str = "{sha} {dirty}";\n'


def generate_version():
    sha = (
        subprocess.check_output(["git", "rev-parse", "--short=8", "HEAD"])
        .decode()
        .strip()
    )
    return f'pub const SHA: &str = "{sha}";\n'


def add_public_key():
    file_path = "../tftp/public_key.raw"
    return f'pub const  PUBLIC_KEY: &\'static [u8] = include_bytes!("{file_path}");'


if __name__ == "__main__":
    with open("./src/helper.rs", "w") as f:
        f.write(generate_header() + "\n")
        f.write("use crate::println;" + "\n")
        f.write(generate_boot_logo() + "\n")
        f.write(generate_version())
        f.write(add_public_key())
