// AUTOGENERATED DO NOT EDIT

use core::arch::asm;

pub unsafe fn hash_kernel_vcrypto(kernel_size: u64, kernel_pointer: u64, result: &mut [u64]) {
	asm!(
		"li a0, 4",
		"add a1, {KERNEL_POINTER}, zero",
		"add a2, {kernel_size}, zero",
		"hash_kernel_asm:",
		".word 0x18572D7",
		".word 0x205F007",
		"addi a1, a1, 64",
		"addi a2, a2, -64",
		"hash_kernel_asm_internal_loop:",
		".word 0x205F207",
		"addi a1, a1, 32",
		"addi a2, a2, -32",
		".word 0x205F407",
		"addi a1, a1, 32",
		"addi a2, a2, -32",
		".word 0xB6822077",
		"bnez a2, hash_kernel_asm_internal_loop",
		".word 0x50033",
		".word 0x158033",
		".word 0x260033",
		".word 0x368033",
		"add {out_1}, a0, zero",
		"add {out_2}, a1, zero",
		"add {out_3}, a2, zero",
		"add {out_4}, a3, zero",
		KERNEL_POINTER = in(reg) kernel_pointer,
		kernel_size = in(reg) kernel_size,
		out_1 = out(reg) result[0],
		out_2 = out(reg) result[1],
		out_3 = out(reg) result[2],
		out_4 = out(reg) result[3]
	);
}